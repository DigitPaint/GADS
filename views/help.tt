[% global.helptext.layout_groups = BLOCK %]
<p>Permissions allow you to specify the access a user has to this field.
Using these settings, you can assign everything from full access for a
particular group of users, to preventing other users knowing that the field
even exists. By default, no groups are assigned to a field, meaning that
no users can view it (including full administrators).</p>

<p>Only groups can be used to assign permissions, so a group must first be
created and users added to that group. A new permission can then be created
for the group, specifying the access that the group has.</p>

<p>Permissions that can be applied are as follows:</p>
<h5>Read values</h5>
<p>User can see the field and its data.</p>
<h5>Enter values for new records</h5>
<p>User can enter data for this field when creating a new record.</p>
<h5>Edit values of existing records</h5>
<p>User can edit values of this field in existing records.</p>
<h5>Approve values in new records</h5>
<p>If requiring approval for data edits from some users, this permission
allows other users to approve the values for new records.</p>
<h5>Approve changes in existing records</h5>
<p>If requiring approval for data edits from some users, this permission
allows other users to approve the values for existing records.</p>
<h5>Enter values for new records without requiring approval</h5>
Allows users to enter values for new records, without requiring those
values to be approved.</p>
<h5>Edit values of existing records without requiring approval</h5>
Allows users to edit values in existing records, without requiring those
values to be approved.</p>
[% END %]

[% global.helptext.force_regex = BLOCK %]
<p>Use this option to force a value to be in a particular format.
Enter a regular expression here to define the format.
<p>To force input of data to contain the word "foo":</p>
<tt><pre>.*foo.*</pre></tt>
<p>To force input of data to be anything beginning with "bar":</p>
<tt><pre>bar.*</pre></tt>
<p>To force input of data to be a single letter followed by any number:</p>
<tt><pre>[A-Za-z][0-9]+</pre></tt>
[% END %]

[% global.helptext.layout_perms = BLOCK %]
The permissions of the field affect the ability of users to specify
the values in records, not change any aspect of the layout. Specifically:

<h4>Open access</h4>
<ul>
    <li>Allows anyone who has "user can update records" permissions to change the
    value of the field. Users without any permissions cannot change the value.
    </li>
</ul>
<h4>Edit with approval</h4>
<ul>
    <li>Allows anyone who has "user can update records" permissions to
        submit a new value, but any such change will be held for approval.</li>
    <li>Allows anyone who has "user does not need approval when updating records"
    to change the value immediately.</li>
    <li>Users without any permissions cannot change the value.</li>
</ul>
<h4>Read only</h4>
<ul>
    <li>Allows anyone who has "user does not need approval when updating records"
    to change the value immediately.</li>
    <li>All other users cannot change the value.</li>
</ul>
[% END %]

[% global.helptext.layout_match = BLOCK %]
<p>For an exact match, enter the required text. For any other type of
match, enter a Regular Expression (see examples below). Values of tree
nodes are rendered as their full path, concatenated with a hash (for
example "Level 1#Level 2#Node value").</p>
<p>To match any non-blank value:</p>
<tt><pre>.+</pre></tt>
<p>To match any of three values "val1", "val2" or "val3 (comment)":</p>
<tt><pre>(val1|val2|val3 \(comment\))</pre></tt>
<p>To match a value containing the word "foo":</p>
<tt><pre>.*foo.*</pre></tt>
<p>To match anything beginning with "bar":</p>
<tt><pre>bar.*</pre></tt>
<p>To match any number:</p>
<tt><pre>[0-9]+</pre></tt>
<p>To match only the node value of a tree, not including its path:</p>
<tt><pre>(.*#)?Node name</pre></tt>

[% END %]

[% global.helptext.layout_calc = BLOCK %]
Calculated fields can be used to automatically generate values based
on other fields. Basic Perl programming style can be used, with the value that
is returned being used for the value of the field. Values from other fields
are used by inserting the field name between square brackets. The ID of the
record can be accessed using [id]. Values in date
ranges are used by adding the suffix &quot;.from&quot; or &quot;.to&quot;
to specify the date required. Upper levels of a tree value can be specified
using &quot;levelX&quot;, where X is the level required, starting at 1 for the
top level. For example:

<tt><pre>
[% FILTER html %]
if ([Country] eq "Greece" && [Region] eq "A")
{
    return "Europe"
}
elsif ([Country] eq "Japan")
{
    return "Asia"
}
elsif ([daterange.from] > CURDATE)
{
    return "Started"
}
elsif ([tree.level2] eq "next level")
{
    return "Next from top"
}
elsif ([Cost] < 10)
{
    return "Bargain"
}
[% END %]
</pre></tt>

[% END %]

[% global.helptext.layout_rag = BLOCK %]
<p>RAG fields can be used to automatically generate colour-coded indicators based
on other fields. Basic Perl programming style can be used to stipulate the conditions
for the colour. If none match, the field will be indicated as grey. Values from other
fields are used by inserting the field name between square brackets, whilst
&quot;CURDATE&quot; can be used to insert the current date.  The ID of the
record can be accessed using [id]. Values in date
ranges are used by adding the suffix &quot;.from&quot; or &quot;.to&quot;
to specify the date required.</p>

<p>Examples:</p>

<tt><pre>[% FILTER html %]
[Start Date] > CURDATE

[Cost to date] > [Budget]

[Budget] < 100000[% END %]
</pre></tt>

<p>By default, empty numerical values will evaluate to zero, so <code>[myfield]
    &lt; 100</code> will evaluate as true, even if <code>myfield</code> is undefined. To
force expressions to grey in such cases, prefix the field with <code>^</code>:
<code>[^myfield] &lt; 100</code> will evaluate to grey.</p>

[% END %]

